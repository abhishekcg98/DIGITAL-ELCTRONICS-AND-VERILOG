module forward(input [8:0]in,input sig,output [2:0]r1,[2:0]r2,[3:0]r3);
  wire [2:0]b1;
  wire [2:0]b2;
  wire [2:0]b3;
  wire [2:0]w1;//output of first stage (2n-1)adder
  wire [3:0]w2;//output of first stage (2n+1)adder
  //reg [3:0]tempr1;
  wire [2:0]tempin1;//input for second stage modulo(2n+1)adder
  wire [2:0]tempin2;//computed input for second stage modulo(2n+1)adder
  //wire [2:0]tempinc;//internal carries in half adder
reg [2:0]tempin3=3'b000;
wire [2:0]tempin4;  
  piporeg p1(in,sig,b1,b2,b3);
  assign r2=b3;
  moduloadder2 m1(b2,b3,w1);
  optinput o1(b3,b2,tempin4);
  moduloadder3 m2(tempin4,tempin3,w2);
  checkblock c1(w2,b1,tempin1,tempin2);
    moduloadder3 m3(tempin1,tempin2,r3);
     moduloadder2 m4(w1,b1,r1);
endmodule

module piporeg(input [8:0]in,input sig,output [2:0]b1,[2:0]b2,[2:0]b3);  
   reg [2:0]b_1;
   reg [2:0]b_2;
   reg [2:0]b_3;
   wire rst;
  integer i=0;
  assign rst=~sig;
  always@(*)
  begin
    if(rst)
      begin
         b_1=3'b0;
          b_2=3'b0;
         b_3=3'b0;
      end
    else
      begin
                  while(i<3)
          begin
             b_1[i]=in[6+i];
             b_2[i]=in[3+i];
             b_3[i]=in[0+i];
             i=i+1;
          end
        end
      end
    assign b1=b_1;
  assign b2=b_2;
    assign b3=b_3;
    
  endmodule                 
        
module checkblock(input [3:0]in,input [2:0]b1,output [2:0]tempin_1,[2:0]tempin_2);
   reg [3:0]check1=4'b1000;
  reg [2:0]check2=3'b111;
   reg [2:0]tempin1;//input for second stage modulo(2n+1)adder
  reg [2:0]tempin2;//computed input for second stage modulo(2n+1)adder
   always@(*)
  begin
  if(in==check1)
    begin
      if(b1!=check2)
        begin
          tempin1=3'b111;
          tempin2=b1+1;
        /*half_adder h1(b1[0],1,tempin2[0],tempinc[0]);
        half_adder h2(b1[1],tempinc[0],tempin2[1],tempinc[1]);
        half_adder h3(b1[2],tempinc[1],tempin2[2],tempinc[2]);*/
      end
    else
      begin
     tempin1=3'b110;
     tempin2=3'b000;
      end
   end
   else
     begin
       tempin1[0]=in[0];
       tempin1[1]=in[1];
       tempin1[2]=in[2];
       tempin2=b1;
       end
       end
       assign tempin_1=tempin1;
       assign tempin_2=tempin2;
     endmodule


module optinput(input [2:0]in1,[2:0]in2,output [2:0]out);
  wire [2:0]tempout1;//twos comp output 1st stage
  wire [2:0]tempout2;//twos comp output 2nd stage
  wire [2:0]tsum;//for initial adding
  wire [2:0]tcarry;//carries in initial adding
  wire [3:0]tout;//mux output
  wire [3:0]tout1;
  assign tout[3]=0;
  assign cin=0;
  twoscomp t1(in2,tempout1);
  full_adder f1(tempout1[0],in1[0],cin,tsum[0],tcarry[0]);
  full_adder f2(tempout1[1],in1[1],tcarry[0],tsum[1],tcarry[1]);
  full_adder f3(tempout1[2],in1[2],tcarry[1],tsum[2],tcarry[2]);
  assign cout=~tcarry[2];
  twoscomp t2(tsum,tempout2);
  mux63 m1(tsum[1:0],tempout2[1:0],tsum[2],tempout2[2],cout,tout[1:0],tout[2]);
validateoptinput v1(tout,cout,tout1);
genvar i;
generate
  for(i=0;i<3;i=i+1)
  begin
    assign out[i]=tout1[i];
  end
  endgenerate
endmodule
    
module twoscomp(input [2:0]in,output [2:0]out);
  reg [2:0]tout;
  always@(*)
  begin
    tout[0]=in[0]^1;
   tout[1]=in[1]^1;
     tout[2]=in[2]^1;
     tout=tout+1;
  end
  assign out=tout;
endmodule


module validateoptinput(input [3:0]in,input cout,output [3:0]out);
  reg [3:0]out1;
  always@(*)
  begin
    if(cout)
      begin
        out1=9-in;
      end
    else
      begin
      out1=in;
      end
      end
      assign out=out1;
endmodule


module moduloadder2(in_a,in_b,out_s);
  input [2:0]in_a;
  input [2:0]in_b;
  wire [2:0]temp_s;
  wire [2:0]tempc;
  output [2:0]out_s;
  
  wire [2:0]p;
  wire [2:0]g;
  wire w1,w2,pout,w3,gout;
  half_adder h1(in_a[0],in_b[0],p[0],g[0]);
  half_adder h2(in_a[1],in_b[1],p[1],g[1]);
  half_adder h3(in_a[2],in_b[2],p[2],g[2]);
  and a3(w3,g[0],g[1]);
  and a4(gout,w3,g[2]);
  
  and a1(w1,p[0],p[1]);
  and a2(w2,w1,p[2]);
  not n1(pout,w2);//for handling case c
  
  //subblock (in1,x1,y1,x2,y2,y5,y3,y4,s)
  subblock2 s1(p[0],p[2],g[1],p[1],p[2],g[0],pout,g[2],temp_s[0]);
  subblock2 s2(p[1],p[0],g[2],p[0],p[2],g[1],pout,g[0],temp_s[1]);
  subblock2 s3(p[2],p[1],g[0],p[0],p[1],g[2],pout,g[1],temp_s[2]);
  half_adder h4(temp_s[0],gout,out_s[0],tempc[0]);
  half_adder h5(temp_s[1],tempc[0],out_s[1],tempc[1]);
  half_adder h6(temp_s[2],tempc[1],out_s[2],tempc[2]);
  
endmodule


module subblock2(input in1,x1,y1,x2,y2,y5,y3,y4,output s);
  //wire not1;
  wire xxx1;
  wire and1,and2;
  wire or1,or2;
  wire w1,w2,w3;//internal outputs for 3 input and gates
  wire and3;
 // not n1(not1,in1);
  and a1(and1,x1,y1);
  and a2(w1,x2,y2);
  //y5 is input for three input and gate
  and a3(and2,w1,y5);
  and a4(and3,in1,y3);//nand gate
  //y3 is input for nand gate
  //not n2(nand1,and3);//nand gate
  or o1(or1,and1,and2);//nor gate
  //y4 is input for nor gate
  or o2(or2,or1,y4);//nor gate
  //not n3(nor1,or2);//nor gate
  xor xx1(s,and3,or2);
endmodule
  


module blackcell(input a,b,c,d,output p,g);
 wire w1;
 and a1(p,a,c);//p1:j
 and a2(w1,b,c);
 or o1(g,w1,d);//gi:j
 endmodule
  

module greycell(input b,c,d,output g);
  wire w1;
  and a1(w1,b,c);
  or o1(g,w1,d);//gi:j
endmodule


module postprocess(input cin,input [1:0]inc,[2:0]inp,input g2,output cout,output [2:0]outsum);
  wire w1;
  xor x1(outsum[0],cin,inp[0]);
  xor x2(outsum[1],inc[0],inp[1]);
  xor x3(outsum[2],inc[1],inp[2]);
  and a1(w1,inc[1],inp[2]);
  or o1(cout,w1,g2);
endmodule
  
module computes3(input pout,cout,output reg out);
always@(*)
begin
  if(pout==1)
    out=1;
  else if(cout==0)
    out=0;
  else
    out=0;
  end
endmodule
module csavea(input [2:0]in1,input [2:0]in2,[2:0]in3,output [2:0]outs,[2:0]outc);
    full_adder f1(in1[0],in2[0],in3[0],outs[0],outc[0]);
  full_adder f2(in1[1],in2[1],in3[1],outs[1],outc[1]);
  full_adder f3(in1[2],in2[2],in3[2],outs[2],outc[2]);
endmodule


module prefixtree(input [1:0]in1,input cin,input [1:0]in2,output [1:0]out,output p);
greycell g1(cin,in2[0],in1[0],out[0]);
//and a1(p,in2[0],in2[1]);
blackcell b2(in2[0],out[0],in2[1],in1[1],p,out[1]);
endmodule

module preprocess(input [2:0]in1,[2:0]in2,output [2:0]outg,[2:0]outp);
  xor x1(outp[0],in1[0],in2[0]);
  and a1(outg[0],in1[0],in2[0]);
  xor x2(outp[1],in1[1],in2[1]);
  and a2(outg[1],in1[1],in2[1]);
  xor x3(outp[2],in1[2],in2[2]);
  and a3(outg[2],in1[2],in2[2]);
endmodule  

module half_adder (in_x, in_y, out_sum, out_carry);
input  in_x;
input  in_y;
output out_sum;
output out_carry;
assign out_sum = in_x^in_y;
assign out_carry = in_x&in_y;
endmodule

module full_adder (in_x, in_y,in_z, out_sum, out_carry);
input  in_x;
input  in_y;
input in_z;
output out_sum;
output out_carry;
//wire sum,carry1,carry2;
//assign out_sum = ((in_x ^ in_y) ^ in_z);
//assign out_carry = (in_x & in_y)|((in_x^in_y)&in_z);
half_adder h1(in_x,in_y,sum,carry1);
half_adder h2(in_z,sum,out_sum,carry2);
or o1(out_carry,carry1,carry2);
endmodule

module siporeg(input a,input [2:0]ccarry,output [2:0]temp);
assign temp[0]=a;
assign temp[1]=ccarry[0];
assign temp[2]=ccarry[1];
//assign temp=ccarry;
//reg [2:0]temp;
/*genvar i;
generate;
  for(i=1;i<=1;i=i+1)
begin
  if(i==1)
    begin
      initial
      begin
temp[i]<= ccarry[i];
//temp[1]<= ccarry[1];
//temp[2]<= ccarry[2];
 end
 end
 end
endgenerate
initial
begin
temp[0]<=a;
temp[1]<=temp[0];
temp[2]<=temp[1];

end
//assign temp1=temp;
/*integer flag=1;
always@(*)
begin
  if(flag==1)
    begin
temp[0]<= ccarry[0];
temp[1]<= ccarry[1];
temp[2]<= ccarry[2];
 flag=2;
  end
  else if(flag==2)
    begin
temp[0]<= a;
temp[1]<= temp[0];
temp[2]<= temp[1];
flag=0;
     end
     else
       begin
         #1;
         end
     end*/
     endmodule
  
module sklanskyadder(input [2:0]a,input [2:0]b,input cin,output [3:0]sum,output cout,output pout,output pcout);
  wire [2:0]outg;
  wire [2:0]outp;
 wire [1:0]outc;
  wire p;
  wire c;
  preprocess pre(a[2:0],b[2:0],outg[2:0],outp[2:0]);
  prefixtree tre(outg[1:0],cin,outp[1:0],outc[1:0],p);
  and a1(pout,p,outp[2]);
 // and a2(c,outp[2],outc[1]);
 // or o1(cout,c,outg[2]);
  postprocess pos(cin,outc[1:0],outp[2:0],outg[2],cout,sum[2:0]);
  assign sum[3]=pout;
  assign pcout=outc[1];
endmodule

module moduloadder3(input [2:0]in1,[2:0]in2,output [3:0]sum);
  wire pcout;
wire [2:0]in3;
wire cin;
assign in3[0]=1;
assign in3[1]=1;
assign in3[2]=1;
assign cin=0;
reg [2:0]check=3'b100;
wire [2:0]csum;
wire [2:0]ccarry;
wire [2:0]ssum;
wire pout;
wire cout;
wire [2:0]hcarry;
wire [2:0]tempcarry;
csavea c1(in1[2:0],in2[2:0],in3[2:0],csum[2:0],ccarry[2:0]);
/*genvar i;
generate 
  for(i=0;i<3;i=i+1)
  begin:gen_loop
     siporeg si1(ccarry[i],tempcarry);
   end
 endgenerate*/
//wire [2:0]tempincarry=ccarry;
siporeg si1(cin,ccarry[2:0],tempcarry[2:0]); 
sklanskyadder s1(csum[2:0],tempcarry[2:0],cin,ssum[2:0],cout,pout,pcout);
assign ctemp=~cout;
assign cptemp=~pcout;
wire tcarry;
or o1(tcarry,cptemp,ctemp);
or o2(carry,tcarry,pout);
half_adder h1(ssum[0],carry,sum[0],hcarry[0]);
half_adder h2(ssum[1],hcarry[0],sum[1],hcarry[1]);
half_adder h3(ssum[2],hcarry[1],sum[2],hcarry[2]);
computes3 cs1(pout,cout,sum[3]);
endmodule


module rom1(addr1,clk,rd1,rst1,data_out1);
  input [2:0]addr1;
   input clk,rd1,rst1;
  output reg [8:0]data_out1;
 reg [6:0]data1[8:0];
integer i;
always @(posedge clk)
  begin
    if(rst1)
      begin
        for(i=0;i<7;i=i+1)
        begin
          data1[i] = 9'b0;
        end
        if(rd1)
          data_out1 = data1[addr1];
      end
    else
      begin
        
        if(rd1)
          begin
        data1[0] = 9'b000000000;
        data1[1] = 9'b100100000;
        data1[2] = 9'b001001000;
        data1[3] = 9'b101101000;
        data1[4] = 9'b010010000;
        data1[5] = 9'b110110000;
        data1[6] = 9'b011011000;
        data_out1 = data1[addr1];
        end        
        else
          begin
          end
        end
    end
    endmodule  

module rom2(addr2,clk,rd2,rst2,data_out2);
  input [2:0]addr2;
  input clk,rd2,rst2;
  output reg [8:0]data_out2;
  reg [7:0]data2[8:0];
integer i;
always @(posedge clk)
  begin
    if(rst2)
      begin
        for(i=0;i<=7;i=i+1)
        begin
          data2[i] = 9'b0;
        end
          if(rd2)
          data_out2 = data2[addr2];
      end
    else 
      begin
        if(rd2)
          begin
            data2[0] = 9'b000000000;
        data2[1] = 9'b110111001;
        data2[2] = 9'b101111010;
        data2[3] = 9'b100111011;
        data2[4] = 9'b011111100;
        data2[5] = 9'b010111101;
        data2[6] = 9'b001111110;
        data2[7] = 9'b000111111;
        data_out2 = data2[addr2];
        end        
        else
          begin
          end
        end
    end
  endmodule

module rom3(addr3,clk,rd3,rst3,data_out3);
  input [3:0]addr3;
   input clk,rd3,rst3;
  output reg [8:0]data_out3;
 reg [8:0]data3[8:0];
integer i;
always @(posedge clk)
  begin
    if(rst3)
      begin
        for(i=0;i<=8;i=i+1)
        begin
          data3[i] = 9'b0;
        end
          if(rd3)
          data_out3 = data3[addr3];
      end
    else
      begin
        if(rd3)
          begin
        data3[0] = 9'b000000000;
        data3[1] = 9'b100011000;
        data3[2] = 9'b000111000;
        data3[3] = 9'b101010000;
        data3[4] = 9'b001110000;
        data3[5] = 9'b110001000;
        data3[6] = 9'b010101000;
        data3[7] = 9'b111000000;
        data3[8] = 9'b000111111;
        data_out3 = data3[addr3];
        end        
        else
          begin
          end
        end
    end
  endmodule

module romconnected(clk,rst,rd1,rd2,rd3,res1,res2,res3);
  input clk,rst,rd1,rd2,rd3;
  input [2:0]res1;
  input [2:0]res2;
  input [3:0]res3;
 wire [8:0] dataout1;
   wire [8:0] dataout2;
   wire [8:0] dataout3;
  rom1 r1(res1,clk,rd1,rst,dataout1);
   rom2 r2(res2,clk,rd2,rst,dataout2);
   rom3 r3(res3,clk,rd3,rst,dataout3);
   endmodule 

module rca2(input [1:0]a,[1:0]b,input carr,output [1:0]s,output carryout);
  wire carry;
  full_adder f1(a[0],b[0],carr,s[0],carry);
  full_adder f2(a[1],b[1],carry,s[1],carryout);
endmodule
  
module rca3(input [2:0]a,[2:0]b,input carr,output [2:0]s,output carryout);
  wire [1:0]carry;
  full_adder f1(a[0],b[0],carr,s[0],carry[0]);
  full_adder f2(a[1],b[1],carry[0],s[1],carry[1]);
  full_adder f3(a[2],b[2],carry[1],s[2],carryout);
endmodule
  

module rca4(input [3:0]a,[3:0]b,input carr,output [3:0]s,output carryout);
  wire [2:0]carry;
  full_adder f1(a[0],b[0],carr,s[0],carry[0]);
  full_adder f2(a[1],b[1],carry[0],s[1],carry[1]);
  full_adder f3(a[2],b[2],carry[1],s[2],carry[2]);
  full_adder f4(a[3],b[3],carry[2],s[3],carryout);
endmodule

module b3toexcess(x ,y,carry);
  input [0:1]x;
  assign temp =0;
  output [1:0]y;
  output carry;
  assign y[0]=~(x[1]);
  assign y[1]=(x[0]^x[1]);
 assign carry=temp^(x[0]&x[1]);
 //assign carry=y[2];
// assign y[3]=x[3]^(x[0]&x[1]&x[2]);
endmodule
  
module b4toexcess(input [0:2]x , output [2:0]y,output carry);
   wire w1,w2;
   assign temp=0;
    not n1(y[0],x[2]);
   xor x1(y[1],x[1],x[2]);
   and a1(w1,x[1],x[2]);
   xor x2(y[2],w1,x[0]);
   and a2(w2,w1,x[0]);
   xor x3(carry,w2,temp);
 /*assign y[3]=~(x[3]);
 assign y[2]=(x[2]^x[3]);
 assign y[1]=x[1]^(x[2]&x[3]);
 assign y[0]=x[0]^(x[3]&x[1]&x[2]);*/
  endmodule
  
module b5toexcess(input [0:3]x , output [3:0]y,output carry);
   wire w1,w2,w3;
   assign temp=0;
    assign y[0]=~x[3];
   xor x1(y[1],x[3],x[2]);
   and a1(w1,x[2],x[3]);
   xor x2(y[2],w1,x[1]);
   and a2(w2,w1,x[1]);
   xor x3(y[3],w2,x[0]);
   and a3(w3,w2,x[0]);
   xor x4(carry,w3,temp);
  /*assign y[4]=~(x[4]);
  assign y[3]=(x[3]^x[4]);
 assign y[2]=x[2]^(x[3]&x[4]);
 assign y[1]=x[1]^(x[3]&x[4]&x[2]);
 assign y[0]=x[0]^(x[3]&x[4]&x[2]&x[1]);*/
    endmodule

module mux21(input x,y,s , output reg m);
  always @(*)
  begin
    if(s)
      m<=y;
    else
      m<=x;
    end
  endmodule
  
module mux63(input [1:0]in1,[1:0]in2,input carr1,carr2,input s,output [1:0]m,output carrsig);
   mux21 m1(in1[0],in2[0],s,m[0]);
  mux21 m2(in1[1],in2[1],s,m[1]);
  mux21 m3(carr1,carr2,s,carrsig);
endmodule;

module mux84(input [2:0]in1,[2:0]in2,input carr1,carr2,input s,output [2:0]m,output carrsig);
  
  mux21 m1(in1[0],in2[0],s,m[0]);
  mux21 m2(in1[1],in2[1],s,m[1]);
  mux21 m3(in1[2],in2[2],s,m[2]);
  mux21 m4(carr1,carr2,s,carrsig);
  
  endmodule;
  
module mux105(input [3:0]in1,[3:0]in2,input carr1,carr2,input s,output [3:0]m,output carrsig);
  
  mux21 m1(in1[0],in2[0],s,m[0]);
  mux21 m2(in1[1],in2[1],s,m[1]);
  mux21 m3(in1[2],in2[2],s,m[2]);
  mux21 m4(in1[3],in2[3],s,m[3]);
  mux21 m5(carr1,carr2,s,carrsig);
  endmodule;
 

module csa1(input [11:0]ina,[11:0]inb,output [11:0]out,output carry);
   wire [0:3]carr;
   wire [0:2]carr1;
   wire [8:0]out2;
   wire [8:0]out1;
   wire [0:1]carrysig;
  assign cin=0;
  rca3 r1(ina[2:0],inb[2:0],cin,out[2:0],carr[0]);
  rca2 r2(ina[4:3],inb[4:3],cin,out1[1:0],carr[1]);
  b3toexcess ex1(out1[1:0],out2[1:0],carr1[0]);
  rca3 r3(ina[7:5],inb[7:5],cin,out1[4:2],carr[2]);
   b4toexcess ex2(out1[4:2],out2[4:2],carr1[1]);
  rca4 r4(ina[11:8],inb[11:8],cin,out1[8:5],carr[3]);
  b5toexcess ex3(out1[8:5],out2[8:5],carr1[2]);
   mux63 m1(out1[1:0],out2[1:0],carr[1],carr1[0],carr[0],out[4:3],carrysig[0]);
  mux84 m2(out1[4:2],out2[4:2],carr[2],carr1[1],carrysig[0],out[7:5],carrysig[1]);
  mux105 m3(out1[8:5],out2[8:5],carr[3],carr1[2],carrysig[1],out[11:8],carry);
endmodule
 

module cmbllogic(input x,y,cin,output sum,cout);
  wire s0,s1,c0,c1;
  xor x1(s1,x,y);
  not n1(s0,s1);
  mux21 m1(s1,s0,cin,sum);
  or o1(c1,x,y);
  and a1(c0,x,y);
  mux21 m2(c0,c1,cin,cout);
endmodule

module csa2(input [11:0]in1,[11:0]in2,output [11:0]sum,output cout);
  wire [10:0]c;
  assign cin=0;
  cmbllogic c1(in1[0],in2[0],cin,sum[0],c[0]);
  genvar i;
  generate
  for(i=1;i<=10;i=i+1)
  begin: u1
    cmbllogic u2(in1[i],in2[i],c[i-1],sum[i],c[i]);
  end
endgenerate
cmbllogic c2(in1[11],in2[11],c[10],sum[11],cout);
endmodule  

module modulomadder(input [11:0]in_x,[11:0]in_y,output [11:0]out_sum);
wire [11:0]sum1;
wire [11:0]sum2;
wire carry1,carry2;
wire [11:0]temp;
  assign temp=12'b111000001000;
  csa1 c1(in_x,in_y,sum1,carry1);
  csa1 c2(sum1,temp,sum2,carry2);
  assign muxsig=carry1|carry2;
  mux12bit m1(sum1,sum2,muxsig,out_sum);
endmodule

module maddercmb(input [11:0]in_x,[11:0]in_y,output [11:0]out_sum);
wire [11:0]sum1;
wire [11:0]sum2;
wire carry1,carry2;
wire [11:0]temp;
  assign temp=12'b111000001000;
  csa2 c1(in_x,in_y,sum1,carry1);
  csa2 c2(sum1,temp,sum2,carry2);
  assign muxsig=carry1|carry2;
  mux12bit m1(sum1,sum2,muxsig,out_sum);
endmodule
